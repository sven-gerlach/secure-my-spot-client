# docker-compose yml file builds the development container
# yml file achieves the same as the following two CLI lines
# docker build -t react-image-dev -f secure-my-spot_client/Dockerfile.dev secure-my-spot_client/
# docker run -d -p 3000:3000 --name react-app-dev -v $(pwd)/src:/app/src:ro react-image-dev
# run this yml file from the CLI with: docker-compose -f docker-compose-dev.yml up -d

# specifies docker-compose version
version: "3.8"

services:
  # specify the React app service
  spa:
    # specify configuration options at container build-time
    build:
      # specify build-context as the client folder
      context: .
      # specify the relevant dockerfile name inside the build-context
      dockerfile: Dockerfile.dev

    # given the build specifications, the image line specifies the tag of the newly created image
    image: spa

    # specify container name
    container_name: spa

    # mapping host port 3000 to container port 3000, such that any request on host port 3000 is passed to container port 3000
    ports:
      - "3000:3000"

    environment:
      # Without this env variable hot-reloading will not work
      # source: https://mherman.org/blog/dockerizing-a-react-app/
      - CHOKIDAR_USEPOLLING="true"
      - REACT_APP_CLIENT_HOST=${REACT_APP_CLIENT_HOST}
      - REACT_APP_API_HOST=${REACT_APP_API_HOST}
      - REACT_APP_GOOGLE_MAPS_KEY=${REACT_APP_GOOGLE_MAPS_KEY}
      - REACT_APP_SESSION_ENCRYPTION_KEY=${REACT_APP_SESSION_ENCRYPTION_KEY}
      - REACT_APP_STRIPE_API_TEST_KEY=${REACT_APP_STRIPE_API_TEST_KEY}

    # specify bind-mount volume such that any changes in the host's (build-context) src folder are reflected / replicated
    # inside the container -> amendments to the website are immediately reflected in the container, avoiding the need
    # to re-start the container after every change to the app
    volumes:
      - local:/app

volumes:
  local: